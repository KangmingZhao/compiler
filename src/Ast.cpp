#include "Ast.h"
#include "SymbolTable.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"
#include <string>
#include <assert.h>
#include<algorithm>

extern FILE *yyout;
int Node::counter = 0;
IRBuilder* Node::builder = nullptr;
bool isreturn=false;
Type *retVal;
std::vector<Type*> paramVector;
std::vector<Operand *> para_operands;// 閻庢稒锚閸ら亶寮幏宀€娈堕柣鈧妿濞堟垿宕ｉ崒娑欐闁汇劌鍨約t
LoopManager loop_manager;

Constant* cal_expr(ExprNode* node2cal)
{
    float cal_result = node2cal->cal_expr_val();
    int cal_result_i = (int)cal_result;
    if (node2cal->cal_expr_val() != PRE_CAL_ERROR_MEETING_VAL)
    {
        SymbolEntry* se;
        if (node2cal->getSymPtr()->getType()->isFLOAT())
        {
            se = new ConstantSymbolEntry(TypeSystem::floatType, cal_result);
        }
        else
        {
            se = new ConstantSymbolEntry(TypeSystem::intType, cal_result_i);

        }
        return new Constant(se);
    }
    else
    {
        return nullptr;
    }
}

void stmt_genCode(StmtNode* stmtNode_2_gen, BasicBlock* bb_2_entry, Function* func)
{
    BasicBlock* origin_entry = func->setEntry(bb_2_entry);
    stmtNode_2_gen->genCode();
    func->setEntry(origin_entry);
}

bool expr_in_cond = 0;

Node::Node()
{
    seq = counter++;
}

void Node::backPatch(std::vector<BasicBlock**> &list, BasicBlock*target)
{
    for(auto &bb:list)
        *bb = target;
}

std::vector<BasicBlock**> Node::merge(std::vector<BasicBlock**> &list1, std::vector<BasicBlock**> &list2)
{
    std::vector<BasicBlock**> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    root->genCode();
    // 闁圭粯鍔曟晶鐘崇珶閻楀牊顫�
    fprintf(yyout, "declare i32 @getint()\n");
    fprintf(yyout, "declare void @putint(i32)\n");
    fprintf(yyout, "declare i32 @getch()\n");
    fprintf(yyout, "declare void @putch(i32)\n");
    fprintf(yyout, "declare void @putf(i32)\n\n");
}

void FunctionDef::genCode()
{
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, se);
    BasicBlock *entry = func->getEntry();
    // set the insert point to the entry basicblock of this function.
    builder->setInsertBB(entry);

    stmt->genCode();

    /**
     * Construct control flow graph. You need do set successors and predecessors for each basic block.
     * Todo
    */
   
}

void BinaryExpr::genCode()
{

    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    if (op < arithmeticEnd)
    {
        //if(expr_in_cond)
        //arithmetic op
        expr1->genCode();
        expr2->genCode();
        Operand* src1 = expr1->getOperand();
        Operand* src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        case MUL:
            opcode = BinaryInstruction::MUL;
            break;
        case DIV:
            opcode = BinaryInstruction::DIV;
            break;
        case MOD:
            opcode = BinaryInstruction::MOD;
            break;
        default:
            opcode = -1;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
    else if (op > arithmeticEnd && op < logicEnd)
    {
        //logical op
        switch (op)
        {
        case AND:

            BasicBlock* trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB.
            expr1->genCode();
            backPatch(expr1->trueList(), trueBB);
            builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
            expr2->genCode();
            true_list = expr2->trueList();
            false_list = merge(expr1->falseList(), expr2->falseList());
            break;
        //case OR:

        //    break;
        }
    }
    else if (op > logicEnd && op < relationEnd)
    {
        //relation op
        expr1->genCode();
        expr2->genCode();
        Operand* src1 = expr1->getOperand();
        Operand* src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case EQUAL:
            opcode = CmpInstruction::E;
            break;
        case NOTEQUAL:
            opcode = CmpInstruction::NE;
            break;
        case LESS:
            opcode = CmpInstruction::L;
            break;
        case GREATER:
            opcode = CmpInstruction::G;
            break;
        case LESSEQUAL:
            opcode = CmpInstruction::LE;
            break;
        case GREATEREQUAL:
            opcode = CmpInstruction::GE;
            break;
        default:
            opcode = -1;
            break;
        }
        new CmpInstruction(opcode, dst, src1, src2, bb);
    }
    else
    {
        //else
    }


    //if (op == AND)
    //{
    //    //闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悹鍥у级椤ユ繈姊洪棃娑氬婵☆偅顨婇、鏃傛崉鐞涒剝顫嶉梺鍦檸閸ㄧ増绂嶆ィ鍐┾拻濞达綀濮ょ涵鍫曟煕閻樺啿濮嶇€殿喖鎲＄换婵嗩潩椤掑偆鍞甸梻浣虹帛閸ㄥ吋鎱ㄩ妶澶婄柧闁归棿鐒﹂崑鈩冪箾閸℃鎳呯紒浣哄厴閺屽秷顧侀柛鎾卞姂楠炲繘鏁撻敓锟�
    //    
    //}
    //else if(op == OR)
    //{
    //    // Todo
    //}
    //else if(op >= LESS && op <= GREATER)
    //{
    //    // Todo
    //}
    //else if(op < arithmeticEnd)
    //{
    //}
}

void Constant::genCode()
{
    // we don't need to generate code.
}

void Id::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getAddr();
    new LoadInstruction(dst, addr, bb);
}

void IfStmt::genCode()
{
    //std::cout << "fuck\n";
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    LinkBB(builder->getInsertBB(), then_bb);
    LinkBB(builder->getInsertBB(), end_bb);

    //builder->getInsertBB()->addSucc(then_bb);
    //builder->getInsertBB()->addSucc(end_bb);
    //then_bb->addPred(builder->getInsertBB());
    //end_bb->addPred(builder->getInsertBB());
    cond->getSymPtr()->changeType(TypeSystem::boolType);
    cond->genCode();
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), end_bb);

    new CondBrInstruction(then_bb, end_bb, cond->getOperand(), builder->getInsertBB());


    //std::cout << then_bb->empty() << end_bb->empty() << std::endl;

    builder->setInsertBB(then_bb);
    stmt_genCode(thenStmt, then_bb, func);
    //thenStmt->genCode();
    then_bb = builder->getInsertBB();

    //闂傚倸鍊烽悞锕傚磿瀹曞洦宕查柟鐑橆殔閻ょ偓銇勯幇鍓佺暠缂佲偓婢跺本鍠愰幖绮规閻掍粙鎮归崶銊с偞闁哄閰ｉ獮鏍庨鈧俊鍏肩箾閸喓绠栧ǎ鍥э躬婵″爼宕卞▎鎴犳毉闂備礁鎲￠…鍡涘礃閼愁垪鍋撻崸妤佺厵缂備降鍨归弸娑欎繆椤愶綇鑰块柡宀嬬秮閹垻绮欏▎鐐棆闂備礁鎲￠悷锕傚垂閸ф钃熼柣鏃傚帶閸ㄥ倹銇勯弮鈧€氬酣濡烽敂鍓ь啎婵犮垼娉涢鍥矗閳ь剟姊虹拠鈥崇仩閻庢凹鍣ｉ崺鈧い鎺嶈兌閳洟鏌ㄥ顒夌唵閻犻缚娅ｆ晥闂佸搫鏈惄顖炵嵁閸ヮ剦鏁囬柣妯哄暱濞呭繒绱撻崒娆撴闁告柨顦靛畷婊冣攽閸垻鐓撴繝銏ｅ煐閸旓箓寮崒鐐寸厱婵炴垵宕獮鏍ㄣ亜閵夈儳校缂佺粯鐩獮瀣倷鐎电ǹ寮虫俊鐐€х€靛矂宕板鍗炲灊妞ゆ挾鍠庣欢鐐烘煙闁箑澧€殿喚鍏橀弻鐔兼嚌閻楀牆娑х紓浣圭叀缁犳牠骞冩ィ鍐╁剳闁硅崵鐨┑鐘垫暩閸嬫盯鎮洪妸褍鍨濋悘鐐跺▏濞戙垹绫嶉柛灞剧矊瀹曘儵鏌ｆ惔銏⑩姇妞ゎ厼娲崺銏ゅ籍閳ь剟濡甸崟顔剧杸闁规儳鐡ㄩ幃娆戠磽閸屾艾鈧懓鐣濋幖浣歌摕婵炴垶锕╁鈺傘亜閹烘垵鈧劙濮€閵堝棛鍘卞┑鐐叉閸ㄥ灚绂嶉幆顬ュ酣宕惰瀹搞儵鏌嶇拠鏌ュ弰妤犵偛顑夐幃娆撳垂椤愶綆鍟呭┑鐘垫暩閸嬬偤宕归崼鏇炵闁煎鍊曢崹婵嬬叓閸ャ劎鈽夐崶鎾⒑缁夊棗瀚峰▓鏇㈡煛閸滀礁澧撮柟顔斤耿閹瑧鎹勬潪鐗堢潖缂傚倷绀侀鍛粹€﹂悜钘夎摕闁跨喓濮寸粈瀣⒒閸喓銆掑ù鐘欏懐纾藉ù锝夋涧婵℃悂鏌涢弬鍧楀弰闁糕斁鍋撳銈嗗坊閸嬫挻绻濋埀顒勬焼瀹ュ懐锛涘┑鈽嗗灥閸嬫劗绮婚弮鍫熺厱鐎光偓閳ь剟宕戝☉銏犵闁割偅娲橀悡蹇撯攽閻樿尙绠抽柣锝変憾閺岋綁鏁傞悙顒€娈岄梻鍥ь樀閺岋絽顫滈崱妤佺亪闂侀€炲苯澧い銊ョ墦楠炲啴顢氶埀顒勩€侀弴銏℃櫆闁芥ê顦竟鍕⒒娴ｅ憡鍟炴繛璇х畵瀹曟粌鈽夐姀鐘靛姦濡炪倖甯掗ˇ顖炴倶閿曞倹鐓涢悘鐐跺Г閸ゅ洭鏌熼瑙勬珚妤犵偞鎹囬獮鎺楀箻閼告晫姗€姊婚崒娆愮グ婵℃ぜ鍔庡▎銏狀潩闊祴鍋撻崒鐐存櫇闁稿本绋戝▓姗€姊虹涵鍛涧闂傚嫬瀚板鏌ヮ敆閸曨剛鍙嗛梺缁樻礀閸婂湱鈧熬鎷�
    //闂傚倷绀侀幖顐λ囬锕€鐤炬繝濠傜墛閸嬶繝鏌曢崼婵愭Ч闁绘挸鍊圭换婵囩節閸屾粌顣虹紓浣插亾闁告劏鏅濈粻楣冩煕閳╁厾顏呮叏婢舵劖鐓忛柛鈩冾殣瀹搞儵妫佹径鎰厱闊洦鎸搁幃鎴︽煟閵婏箑鐏︾紒缁樼洴楠炴捇骞掗幘鍏呮樊婵°倗濮烽崑鐐垫暜閳╁啩绻嗛柣鎴ｅГ閺呮繈鏌嶈閸撴岸宕曢鈶╂斀闁绘劖娼欓悘锕傛煙閸涘﹥灏︾€规洘鍨块獮姗€寮妷锔绘綌闂備胶鎳撻悘婵嬪疮閳哄啳濮冲┑鍌氭啞閻撴盯鎮橀悙鐢垫憘婵炶尙饪硍闂傚倸鍊风粈渚€骞夐敓鐘插瀭鐟滅増甯掔壕鍧楁煏閸繃濯奸柣鎺嶇矙閺岋綁濮€閻樺啿鏆堥梺绋块缁夊綊寮诲☉銏犲嵆闁靛ǹ鍎遍～鈺呮⒑娴兼瑥顩柟铏崌濠€渚€姊虹紒姗堜緵闁哥姵鐗犻崺鈧い鎺嶈兌婢ф娊鏌曢崶銊ュ鐎规洘锕㈤、娆撴嚃閳哄﹥孝闂傚倷娴囬惃顐﹀椽娴ｅ搫鎮卻ert_bb闂傚倸鍊搁崐鐑芥倿閿曚降浜归柛鎰靛枟閸庢鏌涚仦鎯у毈闁绘帟妫勯湁闁稿繐鍚嬬紞鎴炴交濠靛鈷戦悹鎭掑妼濞呮劙鏌熼崙銈嗗
    //闂傚倸鍊风欢姘焽閼姐倖瀚婚柣鏃傚帶缁€澶愮叓閸ャ劍绀冪€规洘鐓￠弻鈥愁吋鎼粹€崇闂佺粯鎸搁崐濠氬焵椤掆偓閸樻粓宕戦幘缁樺€甸柨婵嗛婢х増銇勯敂鐐毆nsert_bb闂傚倷娴囬褏鎹㈤幇顔藉床婵°倓闄嶆禒鍫㈢磼鐎ｎ収鍤﹂柨婵嗘川閸楁碍銇勯鍡樻殝n_bb闂傚倸鍊风欢姘焽瑜嶈灋闁圭虎鍠栫粻顖炴煥閻曞倹瀚�
    //濠电姷鏁搁崑鐐哄垂閸洖绠伴悹鍥у棘濞戞瑦濯撮柣鎴灻惔濠囨⒑閸濆嫮袪闁告柨閰ｉ崺銏ゅ籍閳ь剟濡甸崟顔剧杸闁圭偓娼欏▍锝夋⒑娴兼瑥顩柟铏崌濠€渚€姊虹紒姗堜緵闁哥姵鐗犻崺鈧い鎺嶇贰濞堟棃鏌嶇紒妯诲磳妤犵偛鐗忔竟鏇㈠嫉缁笧h闂傚倸鍊风粈渚€骞夐敓鐘冲仭闁挎洖鍊归弲婵嬫煏韫囧鈧洟姊婚鐐寸叄闊洦绋堥崑鎾斥槈濮橆剙鈷曢梻浣告惈椤︻垶鎮ч崟顖氱鐎广儱娲ㄩ幊鍗恘d_bb闂傚倸鍊风欢姘焽瑜嶈灋闁圭虎鍠栫粻顖炴煥閻曞倹瀚�

    new UncondBrInstruction(end_bb, then_bb);

    //end_bb->output();
    //then_bb->output();
    //for (auto fuck : then_bb->getParent()->getBlockList())
    //{
    //    std::cout << fuck->succEmpty() << " " << fuck->predEmpty() << std::endl;
    //}

    
    builder->setInsertBB(end_bb);
}

void IfElseStmt::genCode()
{
    // Todo
    Function* func;
    BasicBlock* then_bb, * else_bb, * end_bb;

    BasicBlock* now_bb = builder->getInsertBB();
    //濠电姷鏁告慨浼村垂瑜版帗鍋夐柕蹇嬪€曠粈瀣煕椤垵浜濋柟顔界懇濮婄粯鎷呯粵瀣異闂佸憡鎸诲銊╁箲閵忋倕骞㈡繛鎴炵懃閸撹淇婇妶蹇曞埌闁哥噥鍋婂畷锝嗙節閸愶缚绨婚梺鍝勭Р閸庨亶鍩€椤掍緡娈樼紒顔肩墛瀵板嫮浠﹂幆褎鐎鹃梻浣虹帛椤ㄥ懘鎮ф繝鍕剨妞ゆ挾鍎愰悢鍡欐喐韫囨梹鍙忛梻鍫熶緱閻掕棄鈹戦悩瀹犲缂佺姵绋掗妵鍕冀閻㈢數蓱闂佸搫鍊甸崑鎾绘⒒閸屾瑧顦﹂柟璇х磿閺侇喖螖娴ｈ櫣褰鹃梺绯曞墲閵囨盯寮搁弮鍫熺厵閻庣數枪鏍￠梺鍝ュ枎閹碱偊婀侀梺鎸庣箓濞诧箓宕甸埀顒傜磽娴ｇ懓绲绘い顓犲厴瀵鈽夊⿰鍛澑闁诲函缍嗘禍婊勬叏閵忕姭鏀介柣鎰皺婢ф盯鏌涢妸銉т虎闁伙綁顥撶划娆戞嫚閻愵剚鈷愰柟宄版嚇瀹曟粓骞囬崹顐わ紱hen闂傚倸鍊风欢姘焽瑜嶈灋闁哄啫鐗忛崣鏇㈡煟閻愮數鏆塭闂傚倸鍊风粈渚€骞夐敍鍕灊鐎光偓閸曨剙浠肩紓浣割槹娴滎垶姊婚崒娆戝妽闁活亜缍婂畷婵嗙暆閳ь剟鍩€椤掍礁鍤柛鎾村哺瀵煡宕奸弴鐔蜂汗闂佺粯鍔栭崹婵堝垝閹绢喗鈷戦悷娆忓缁茬粯銇勯幋婵囧窛缂侇喖鐗婂鍕箛椤撶姴骞楅梻浣告贡閸庛倕煤濡吋鍏滃Δ锝呭暞閻撴瑦銇勯弮鍌滄憘婵炲牊绮庨埀顒侇問閸犳牠鎮ユ總绋垮瀭濡わ絽鍟惌妤€顭块懜寰楊亝绂掑ú顏呪拺闁煎鍊曞瓭濠电偞娼欓崐鍨暦閵忋倖鍤岄柤鍓插厸濮规姊虹紒妯哄闁圭⒈鍋婂畷锝嗙節閸愶缚绨婚梺鍝勭▉閸嬪嫭绂掗敃鈧湁闁绘顒查懓鍧楁煙椤旀儳鍘寸€殿喗娼欓～婵囶潙閺嶃剱婊勭節閻㈤潧袥闁稿鎸婚妵鍕疀閹炬潙鍋嶆繛瀛樼矊缂嶅﹪寮婚悢鐓庣畾鐟滃秹寮虫潏銊ｄ簻闁靛牆鎳忛崵鍥煙椤旀儳鍘寸€殿喗娼欓～婵嬪础閻愬樊鐎撮梺鑽ゅ枑缁秴顭垮鈧畷顖炲级閹寸姵娈惧┑掳鍊曢幊搴℃暜闁荤喐绮岄柊锝夊箖妤ｅ啯鐒肩€广儱妫涢崢閬嶆偡濠婂啴鍙勯柕鍡楀暞瀵板嫮浠﹂幆褍绨ユ繝纰樻閸ㄤ即宕ョ€ｎ喖纾绘俊顖氱毞閸嬫捇宕楁径濠佸闂備線鈧偛鑻晶顕€鏌嶇紒妯诲磳妤犵偛顑夐弫鍐焵椤掑啰绠介梻鍌欐祰濞夋洟宕抽敃鍌氱闁跨噦鎷�
    //闂傚倸鍊峰ù鍥綖婢跺顩插ù鐘差儏绾惧潡鏌涢幇顒佲枙闁绘帊绮欓弻娑㈠箛閸忓摜鍑归梺鍝ュ枎閹碱偊濡撮幒鎴僵闁挎繂鎳嶆竟鏇㈡⒒娓氣偓閳ь剛鍋涢懟顖涙櫠椤栫偞鐓曢柡鍐ｅ亾闁绘濞€閵嗕礁螖閸涱喖鈧兘鏌涘┑鍡楊伀妞ゆ柨鎳忕换婵嬫偨闂堟刀銏ゆ煕婵犲懎鍚圭紒顔芥⒐缁轰粙宕ㄦ繝鍕箞闂備浇顫夐崕宕囧椤撶偞姣勫┑锛勫亼閸婃劙寮查鍡欎笉闁规崘宕靛畵渚€鏌熼幑鎰靛殭缂佺姵濞婇弻鐔衡偓娑欘焽缁犳挻鎱ㄧ憴鍕弨婵﹤鎼晥闁搞儜鍐剧€抽梺璇插閸戝綊宕滃▎鎾偓锕傚炊椤掍焦娅栭梺鍛婃处閸撴瑩顢撳☉銏♀拺闁告稑锕ョ€垫瑩鏌涘☉鍗炴灓闁逞屽墻閸樼晫鎹㈠☉銏犵闁绘劖娼欓弳妤呮⒑濮瑰洤濡块悘蹇撶n闂傚倸鍊风粈渚€骞楀⿰鍫濈獥闁糕剝绋戠壕鍧楁煕閹邦厾銈撮柡瀣閺岀喐娼忔ィ鍐╊€嶉梺鍝勬媼閸撴盯鍩€椤掆偓閸樻粓宕戦幘缁樼厱闁归偊鍘奸崝銈夋煛閸滀礁骞楃紒缁樼箞濡啫鈽夊Ο宄颁壕闁芥ê锛夊☉銏犵妞ゆ牗姘ㄩ悾鍝勨攽椤旂》鏀绘い鈺冧刊Code

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    else_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);



    //fprintf(yyout, "fuck\n");
    //builder->getInsertBB()->output();
    //fprintf(yyout, "fuck\n");
    //闂傚倸鍊风粈渚€骞夐敓鐘冲仭妞ゆ牜鍋涢崹鍌涖亜閺嶃劎銆掓い鈺傜叀閺岀喖鎮滃鍡樼暦闂佺ǹ瀛╅崹鍧楀箖濡ゅ懏鏅查幖瀛樼箘閻╁酣姊虹紒妯诲碍闁稿﹤娼″璇测槈閵忊剝娅嗛梺鍛婄箓鐎氼剟锝為崨顖滅＝濞达綀娅ｇ敮娑㈡煟濡や緡娈樼紒顔界懄瀵板嫰骞囬鐐扮病婵犵绱曢崑鎾剁箔閸椻暊er->getInsertBB()濠电姷鏁搁崑鐐哄垂閸洖钃熼柕濞炬櫓閺佸嫰鏌涘☉娆愮稇缂佺姵鐗楁穱濠囧Χ閸涱喖娅ら梺绋块缁夊綊寮诲☉銏犲嵆闁靛ǹ鍎扮花濠氭⒑鏉炴壆顦﹂柣鏍с偢楠炲啫螖閸涱厽宓嶅銈嗘尵閸犲骸鈻撶仦瑙ｆ斀妞ゆ棁顫楀⿰鍫濈闁硅揪濡囧畵浣衡偓骞垮劚椤︻垳绮绘繝姘厱闁归偊鍨伴惃娲煏閸偂绨肩紒缁樼〒閳ь剚绋掗…鍥儗婵犲洦鐓欓柡鍌樺€栫€氾拷<b闂傚倸鍊烽悞锕傛儑瑜版帒绀夌€光偓閳ь剟鍩€椤掍礁鍤柛娆忓暣楠炲棙绗熼埀顒勩€佸▎鎾村殟闁靛／鍛呫倝姊绘担鍛婂暈闁告枮鍥ㄥ殘鐟滅増甯掔壕濠氭煙閸撗呭笡闁哄懏鎮傞弻銊╂偆閸屾稑顏�

    LinkBB(builder->getInsertBB(), then_bb);
    LinkBB(builder->getInsertBB(), else_bb);

    LinkBB(then_bb, end_bb);
    LinkBB(else_bb, end_bb);

    /*builder->getInsertBB()->addSucc(then_bb);
    builder->getInsertBB()->addSucc(else_bb);

    then_bb->addSucc(end_bb);
    else_bb->addSucc(end_bb);

    then_bb->addPred(builder->getInsertBB());
    else_bb->addPred(builder->getInsertBB());

    end_bb->addPred(then_bb);
    end_bb->addPred(else_bb);*/


    cond->getSymPtr()->changeType(TypeSystem::boolType);
    cond->genCode();
    backPatch(cond->trueList(), then_bb);    
    backPatch(cond->falseList(), else_bb);

    //std::cout << then_bb->empty() << end_bb->empty() << std::endl;

    builder->setInsertBB(then_bb);
    stmt_genCode(thenStmt, then_bb, func);
    //thenStmt->genCode();
    //then_bb = builder->getInsertBB();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);


    builder->setInsertBB(else_bb);
    stmt_genCode(elseStmt, then_bb, func);
    //elseStmt->genCode();
    else_bb = builder->getInsertBB();
    //闂傚倸鍊风粈渚€骞夐敍鍕殰闁冲搫鎳庣壕濠氭煕閺囥劌骞楃€规洘鐓￠弻锟犲炊閳轰焦鐏佸銈傛櫆閻擄繝寮诲☉銏犵労闁稿繒濯禍婵嬪磿閻滎摬se闂傚倸鍊风粈渚€骞夐敍鍕灊鐎光偓閸曞灚鏅╅梺纭呭吹缁岋箯闂傚倸鍊烽悞锕傛儑瑜版帒绀夌€光偓閳ь剟鍩€椤掍礁鍤柛銊ョ埣閵嗕礁顫濈捄渚綂闂侀潧鐗嗛幊鎰版偂閹达附鈷戦梻鍫熶緱濡插爼鏌涙惔銏㈠弨鐎规洘鍨挎俊鐑藉煛閸屾粌骞愰梻浣稿閸嬪懘鎳濋悙顒傤洸濡わ絽鍟埛鎴︽煕濞戞﹫榫氬瑙勵焽缁辨帒鐣濋埀顒勫箲閸ヮ剚鈷掑ù锝堫潐閸嬬娀鏌涙惔銏犫枙闁糕斁鍋撳銈嗗坊閸嬫捇姊洪悾灞稿亾瀹€鍕拺闁煎鍊曞瓭濠电偞娼欓崐鍨暦閵忋倖鍤岄柤鍓插厸濮规姊虹紒妯哄闁圭⒈鍋婇弻銊╁Χ婢跺鍙嗛梺缁樻礀閸婂湱鈧熬鎷�
    new UncondBrInstruction(end_bb, else_bb);



    new CondBrInstruction(then_bb, else_bb, cond->getOperand(), now_bb);
    builder->setInsertBB(end_bb);
}

void CompoundStmt::genCode()
{
    // Todo
    if(stmt != nullptr)
        stmt->genCode();
}

void SeqNode::genCode()
{
    // Todo
    if (stmt1 != nullptr)
        stmt1->genCode();
    if (stmt2 != nullptr)
        stmt2->genCode();
}

void DeclStmt::genCode()
{
    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
    if(se->isGlobal())
    {
        //std::cout << "fuck" << std::endl;
        Operand *addr;
        SymbolEntry *addr_se;
        addr_se = new IdentifierSymbolEntry(*se);
        addr_se->setType(new PointerType(se->getType()));
        addr = new Operand(addr_se);
        se->setAddr(addr);
        Instruction *g;
        //initVal->genCode();
        g = new GlobalInstruction(new Operand(id->getSymPtr()), nullptr, se);
        g->output();
     
    }
    else if(se->isLocal())
    {
        //std::cout << "you" << std::endl;
        switch (se->getType()->get_range())
        {
        case 2:
            Function * func = builder->getInsertBB()->getParent();
            BasicBlock* entry = func->getEntry();
            Instruction* alloca;
            Operand* addr;
            SymbolEntry* addr_se;
            Type* type;
            type = new PointerType(se->getType());
            addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
            addr = new Operand(addr_se);
            alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
            entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
            se->setAddr(addr);
            break;
        }
                                               // set the addr operand in symbol entry so that we can use it in subsequent code generation.
    }
    else
    {
        std::cout << "what the hell are you trying to decl?!" << std::endl;
    }
}

void ReturnStmt::genCode()
{
    //Todo
    BasicBlock* ret_bb = builder->getInsertBB();
    Operand* src=nullptr;
    if(retValue){
        retValue->genCode();
        src=retValue->getOperand();
    }
    new RetInstruction(src,ret_bb);
}

void AssignStmt::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(lval->getSymPtr())->getAddr();
    expr->genCode();
    Operand* src = expr->getOperand();
    //Operand* src;
    //Constant* cal_result = cal_expr_manager.cal_expr(expr);
    //if (cal_result != nullptr)
    //{
    //    //cal_result->genCode();
    //    src = cal_result->getOperand();
    //}
    //else
    //{
    //    expr->genCode();
    //    src = expr->getOperand();
    //}
    /***
     * We haven't implemented array yet, the lval can only be ID. So we just store the result of the `expr` to the addr of the id.
     * If you want to implement array, you have to caculate the address first and then store the result into it.
     */
    new StoreInstruction(addr, src, bb);
}

void Ast::typeCheck()
{
    if(root != nullptr)
        root->typeCheck();
}

void FunctionDef::typeCheck()
{
    // Todo
    SymbolEntry *se = this->getSymbolEntry();
    Type *ret = ((FunctionType *)(se->getType()))->getRetType();
    if (stmt == nullptr&&ret != TypeSystem::voidType)
    {   
         fprintf(stderr, "function\'%s\'misses return\n",se->toStr().c_str());
        // 闂傚倸鍊风粈渚€骞夐敓鐘插瀭闁稿繐鍚嬮崣蹇涙煏閸繍妲告慨瑙勭叀閺岋綁寮幐搴℃殘婵犳鍨遍幐鎶藉蓟閻旂厧绠氱憸蹇旂椤忓牊鐓涘ù锝嚽归顓㈡煛鐏炶濮傞柟顔哄€濆畷鎺戔槈濮楀棔绱�?闂傚倸鍊风粈渚€骞夐敍鍕殰闁搞儺鍓欑壕褰掓煛瀹ュ骸骞栭柦鍐枛閺屾盯濡烽鐓庮潻闂佸憡鐟ラ敃銉╁Φ閸曨垰鍐€闁靛ě灞炬闂備胶枪妤犳悂鏁冮敂鐐潟闁圭儤鍤﹂弮鍌楀亾閿濆骸澧伴柡鍡欏█濮婅櫣鎷犻垾铏亪缂備焦鍔栭弨绯筪
    }
    // 闂傚倸鍊风粈渚€骞夐敓鐘插瀭闁稿繐鍚嬮崣蹇涙煏閸繍妲告慨瑙勭叀閺岋綁寮幐搴℃殘婵犳鍨遍幐鎶藉蓟閻旂厧绠查柟閭﹀墰濮ｃ垽姊洪懡銈呮瀾缂佽鐗撳濠氬Ω閳哄倸浜為梺绋挎湰缁嬫垿顢旈敓锟�?闂傚倸鍊风粈渚€骞夐埄鍐粴闁诲氦顫夊ú鐔奉焽瑜旈弫鍐閵堝懎绐涢柣搴㈢⊕閿氶柛鎾村▕閺岋絾鎯旈婊呅ｉ梺绋款儏閹虫劙鎮疯濮婄粯鎷呴崨濠傛殘闂佺粯妫忛崜姘┍婵犲洤鐐婃い鎺戭槹閺呯偞绻涢幘鏉戠劰闁稿鎸鹃埀顒冾潐濞插繘宕曢棃娑氭殾闁绘挸绨堕弨浠嬫煙閹冾暢闁绘挻鍨垮缁樻媴閼恒儳銆婇梺闈╃秶缁犳捇鐛箛娑欐櫢闁跨噦鎷�?
    else{
        isreturn=false;
        stmt->typeCheck();
        if(!isreturn && ret != TypeSystem::voidType){//don't have return and not void
            fprintf(stderr, "function  \'%s\'misses return\n",se->toStr().c_str());
        }
        // has return  and wrong return  
        else if(isreturn&&ret!=TypeSystem::voidType)
        {
            if(ret!=retVal)
            {
            fprintf(stderr, "function \'%s\'has wrong return \n",se->toStr().c_str());
            }
        }

        }

    
    // if (stmt != nullptr)
    //     stmt->typeCheck();
    if(paraStmt != nullptr)
        paraStmt->typeCheck();
}


void BinaryExpr::typeCheck()
{
    // Todo
    /*Type* type1 = expr1->getSymPtr()->getType();
    Type * type2 = expr2->getSymPtr()->getType();
    if (type1 != type2)
    {
        fprintf(stderr, "type %s and %s mismatch \n",
          type1->toStr().c_str(), type2->toStr().c_str());
        if (ERROR_MESSAGE_WRITE_INTO_AST)
        {
            fprintf(yyout, "type %s and %s mismatch \n",
                type1->toStr().c_str(), type2->toStr().c_str());
        }
    }*/

    Type* type1 = expr1->getSymPtr()->getType();
    Type* type2 = expr2->getSymPtr()->getType();

    Type* Prior = type1->getKindValue() > type2->getKindValue() ? type1 : type2;
    Type* later = type1->getKindValue() < type2->getKindValue() ? type1 : type2;


    if (type1->get_range() != type2->get_range())
    {
        fprintf(stderr, "type %s and %s mismatch \n",
            type1->toStr().c_str(), type2->toStr().c_str());
        if (ERROR_MESSAGE_WRITE_INTO_AST)
        {
            fprintf(yyout, "type %s and %s mismatch \n",
                type1->toStr().c_str(), type2->toStr().c_str());
        }
    }
    else
    {
        if (type1->getKindValue() != type2->getKindValue())
        {
            fprintf(stderr, "type %s and %s mismatch , but we convert %s to %s for you \n",
                type1->toStr().c_str(), type2->toStr().c_str(),
                later->toStr().c_str(), Prior->toStr().c_str());
            if (ERROR_MESSAGE_WRITE_INTO_AST)
            {
                fprintf(yyout, "type %s and %s mismatch , but we convert %s to %s for you \n",
                    type1->toStr().c_str(), type2->toStr().c_str(), later->toStr().c_str(), Prior->toStr().c_str());
            }
        }
    }



    if (expr1 != nullptr)
        expr1->typeCheck();
    if (expr2 != nullptr)
        expr2->typeCheck();

}

void Constant::typeCheck()
{
    // Todo
}

void Id::typeCheck()
{
    // Todo


    if (Dimension != nullptr)
        Dimension->typeCheck();
    if (Init != nullptr)
        Init->typeCheck();

}

void IfStmt::typeCheck()
{
    // Todo


    if (cond != nullptr)
        cond->typeCheck();
    if (thenStmt != nullptr)
        thenStmt->typeCheck();

}

void IfElseStmt::typeCheck()
{
    // Todo


    if (cond != nullptr)
        cond->typeCheck();
    if (thenStmt != nullptr)
        thenStmt->typeCheck();
    if (elseStmt != nullptr)
        elseStmt->typeCheck();
}

void CompoundStmt::typeCheck()
{
    // Todo  
    if (stmt != nullptr)
        stmt->typeCheck();
}

void SeqNode::typeCheck()
{
    // Todo
    if (stmt1 != nullptr)
        stmt1->typeCheck();
    if (stmt2 != nullptr)
        stmt2->typeCheck();
}

void DeclStmt::typeCheck()
{
    // Todo
    if (id != nullptr)
        id->typeCheck();
}

void ReturnStmt::typeCheck()
{
    // Todo
    if(retValue)
    {
       isreturn=true;//闂傚倷娴囧畷鍨叏閺夋嚚娲Χ婢跺浠遍梺闈浨归崕娆撴晲婢跺﹦顓洪梺鎸庢濡嫰宕滈幎鑺モ拺缂備焦蓱閻撱儵鏌熺拠褏纾跨紒顔碱煼楠炴帒螖閳ь剛鐥閺屽秹宕崟顐熷亾瑜版帗鍋傞柕澶涘缁犻箖鏌涘▎蹇ｆШ濠⒀呮暬閺岀喖顢涘顒佹閻庤娲滈崰鏍€侀弮鍫濆耿闁宠桨妞掔紓鎾绘⒒閸屾瑦绁版繛澶嬫礋瀹曟娊鏁冮崒姘鳖唵闂佽法鍣﹂幏锟�?
        retVal=retValue->getSymPtr()->getType(); //闂傚倷绀侀幖顐λ囬锕€鐤炬繝濠傜墕閽冪喖鏌曟繛鍨壄婵炲樊浜滈崘鈧銈嗘尵閸嬬喖鏁嶅▎鎾粹拺闁稿繗鍋愰妶鎾煛閸涱垰浠遍柨婵堝仱閺佸啴宕掑☉姘汲闂備胶绮ú鏍磹閸︻厸鍋撳鐐?
    }


    if (retValue != nullptr)
        retValue->typeCheck();

}

void AssignStmt::typeCheck()
{
    // Todo
    //闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱嚰纭呯亙濠德板€曠€氼參顢旈悩缁樼厪闁糕剝顨忛崕鏃€顨ラ悙鑼闁哄被鍔庨埀顒婄祷閸斿本绂嶆导瀛樼厸濠㈣泛锕︽晶銏ゆ煕鐎ｎ偅灏甸柍褜鍓氶懝鎯э耿闁秴绠憸鐗堝俯閺佸啴鏌ㄩ弮鍥撴繛鍛灲濮婃椽宕崟顐熷亾閸洖纾归柡宥庡亐閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟螣閼姐値娴勫銈嗙墱閸嬬偤鎮￠妷鈺傜厽闁哄倹瀵ч崯鐐烘煟韫囷絽娅嶉柡宀€鍠愰ˇ鐗堟償閳ュ啿绠ｉ梻浣芥〃閻掞箓骞愰幆褜鍤楀┑鐘插亞濞间即鏌ｉ妸銏犱壕st闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻銊╂偆閸屾稑顏�
    if (lval->get_symbolEntry()->isConstIdentifer())
    {
        fprintf(stderr, "identifier \"%s\" is const\n", lval->get_name().c_str());
    }


    Type* type1 = lval->getSymPtr()->getType();
    Type* type2 = expr->getSymPtr()->getType();

    if (type1->get_range() != type2->get_range())
    {
        fprintf(stderr, "type %s and %s mismatch \n",
            type1->toStr().c_str(), type2->toStr().c_str());
        if (ERROR_MESSAGE_WRITE_INTO_AST)
        {
            fprintf(yyout, "type %s and %s mismatch \n",
                type1->toStr().c_str(), type2->toStr().c_str());
        }
    }
    else
    {
        if (type1->getKindValue() != type2->getKindValue())
        {
            fprintf(stderr, "type %s and %s mismatch , but we convert %s to %s for you \n",
                type1->toStr().c_str(), type2->toStr().c_str(), type2->toStr().c_str(), type1->toStr().c_str());
            if (ERROR_MESSAGE_WRITE_INTO_AST)
            {
                fprintf(yyout, "type %s and %s mismatch , but we convert %s to %s for you \n",
                    type1->toStr().c_str(), type2->toStr().c_str(), type2->toStr().c_str(), type1->toStr().c_str());
            }
        }
    }


    if (lval != nullptr)
        lval->typeCheck();
    if (expr != nullptr)
        expr->typeCheck();
    //if (type1 != type2)
    //{
    //    fprintf(stderr, "type %s and %s mismatch \n",
    //        type1->toStr().c_str(), type2->toStr().c_str());
    //    if (ERROR_MESSAGE_WRITE_INTO_AST)
    //    {
    //        fprintf(yyout, "type %s and %s mismatch \n",
    //            type1->toStr().c_str(), type2->toStr().c_str());
    //    }
    //}
}





//闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悹鍥у级椤ユ繈姊洪棃娑氬婵☆偅顨婇、鏃堝醇閺囩啿鎷洪柣鐘充航閸斿矂寮搁幋锔界厸閻庯綆浜堕悡鍏碱殽閻愯尙绠婚柟顔界矒閹崇偤濡烽敂绛嬩户闂傚倷绀侀幖顐﹀磹閸洖纾归柡宥庡亐閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悹鍥у级椤ユ繈姊洪棃娑氬婵☆偅顨婇、鏃堝醇閺囩啿鎷洪柣鐘充航閸斿矂寮搁幋锔界厸閻庯綆浜堕悡鍏碱殽閻愯尙绠婚柡浣规崌閺佹捇鏁撻敓锟�
/*闂傚倷鑳堕幊鎾绘偤閵娾晜鏅濋柕蹇嬪€曢弸渚€鏌熼幑鎰靛殭婵☆偅锕㈤弻鏇㈠醇濠靛浂妫炲銈呯箰閻栫厧顫忛搹瑙勫磯闁靛ǹ鍎查悗楣冩⒑閸濆嫷鍎忔い顓犲厴閻涱喛绠涘☉娆忊偓濠氭煠閹帒鍔滄繛鍛灲濮婃椽宕崟顐熷亾閸洖纾归柡宥庡亐閸嬫挸顫濋悙顒€顏�

UnaryExpr 
InitNode
ArrDimNode
ParaNode
FunctCall
DeclInitStmt
ConstDeclInitStmt
DeclList
ConstDeclList
WhileStmt
BreakStmt
ContinueStmt
DoNothingStmt*/

void ArrDimNode::typeCheck()
{
    //闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋浣界闂佺灏欐晶妤冪箔閻旂厧鐒垫い鎺戝閺嬩線鏌熼幑鎰靛殭婵☆偅锕㈤弻鏇㈠醇濠靛浂妫炲銈呯箺閸╂牠骞堥妸鈺佺闁瑰鍋熼妶鈺呮⒑缁嬫鍎愰柟鐟版喘閻涱喛绠涘☉娆忊偓濠氭煠閹帒鍔滄繛鍛灲濮婃椽宕崟顐熷亾閸洖纾归柡宥庡亐閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悹鍥у级椤ユ繈姊洪棃娑氬婵☆偅顨婇、鏃堝醇閺囩啿鎷哄銈嗗笒閿曪妇绮旈鈧弻鈩冩媴鐟欏嫬纾抽悗娈垮櫘閸撶喐淇婇崼鏇炲耿婵°倕锕ｇ槐锕傛⒒閸屾瑦绁版繛澶嬫礋瀹曚即骞橀崜浣虹効闂佽法鍣﹂幏锟�32闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋幇浣圭秷缂備礁顑呴ˇ顖滃弲濡炪倕绻愰幊蹇撯枍閵忋倖鐓熼柣鏂挎憸閹冲嫰鎮介娑樻诞鐎规洜鏁诲浠嬵敇閻愭鍞甸梻浣虹帛閸ㄥ吋鎱ㄩ妶澶婄柧闁归棿鐒﹂悡娑㈡煕鐏炰箙顏堝焵椤掍胶澧遍柍褜鍓氶懝鍓х礊婵犲洤钃熼柕濞炬櫆閸嬪嫰鏌涜箛鎾虫倯闁革絾濞婂娲传閸曨厜銏＄箾閺夋垵顏俊鍙夊姇閳规垿宕堕埡濠冪カ闂備線鈧偛鑻晶顖滅磼鐎ｎ亷韬€规洖鎽滄竟鏇㈠箞缁叉盯姊婚崒娆愮グ婵炲娲熷畷浼村箛閺夊灝鍤戞繝鐢靛У閼瑰墽绮婚婊呯＜閻忕偟鏅悰寮宎t闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀鐘垫殝闁哄娉曠槐锕傛⒒娴ｅ摜鏋冩俊顐㈠楠炲﹨绠涢弴妤€浜炬慨妯煎亾鐎氾拷
    if (!dimension_size->get_symbolEntry()->getType()->isInt())
    {
        fprintf(stderr, "i32 is needed, but %s is given \n",
            dimension_size->get_symbolEntry()->getType()->toStr().c_str());
    }



    if (arr1 != nullptr)
        arr1->typeCheck();
    if (arr2 != nullptr)
        arr2->typeCheck();
    if (dimension_size != nullptr)
    {
        if(dimension_size->cal_expr_val() == PRE_CAL_ERROR_MEETING_VAL)
            fprintf(stderr, "not a const \n");
        dimension_size->typeCheck();
    }
}
void ArrDimNode::genCode()
{

}

void DoNothingStmt::typeCheck()
{

    if (do_nothing_node != nullptr)
        do_nothing_node->typeCheck();
}
void DoNothingStmt::genCode()
{

}

void ContinueStmt::typeCheck()
{
    if (!whether_valid)
        fprintf(stderr, "continue not in loop \n");
}
void ContinueStmt::genCode()
{
    if (whether_valid && !loop_manager.empty())
    {
        BasicBlock* cond_bb;
        cond_bb = loop_manager.get_cond_bb();
        new UncondBrInstruction(cond_bb, builder->getInsertBB());
    }
}

void BreakStmt::typeCheck()
{
    if(!whether_valid)
        fprintf(stderr, "break not in loop \n");
}
void BreakStmt::genCode()
{
    if (whether_valid && !loop_manager.empty())
    {
        BasicBlock* end_bb;
        end_bb = loop_manager.get_end_bb();
        new UncondBrInstruction(end_bb, builder->getInsertBB());
    }
}

void WhileStmt::typeCheck()
{

    if (cond != nullptr)
        cond->typeCheck();

    if (doStmt != nullptr)
        doStmt->typeCheck();
}
void WhileStmt::genCode()
{
    Function* func;
    BasicBlock* loop_cond_bb, * loop_body_bb, * end_bb;
    //BasicBlock* now_bb = builder->getInsertBB();
    //濠电姷鏁告慨浼村垂瑜版帗鍋夐柕蹇嬪€曠粈瀣煕椤垵浜濋柟顔界懇濮婄粯鎷呯粵瀣異闂佸憡鎸诲銊╁箲閵忋倕骞㈡繛鎴炵懃閸撹淇婇妶蹇曞埌闁哥噥鍋婂畷锝嗙節閸愶缚绨婚梺鍝勭Р閸庨亶鍩€椤掍緡娈樼紒顔肩墛瀵板嫮浠﹂幆褎鐎鹃梻浣虹帛椤ㄥ懘鎮ф繝鍕剨妞ゆ挾鍎愰悢鍡欐喐韫囨梹鍙忛梻鍫熶緱閻掕棄鈹戦悩瀹犲缂佺姵绋掗妵鍕冀閻㈢數蓱闂佸搫鍊甸崑鎾绘⒒閸屾瑧顦﹂柟璇х磿閺侇喖螖娴ｈ櫣褰鹃梺绯曞墲閵囨盯寮搁弮鍫熺厵閻庣數枪鏍￠梺鍝ュ枎閹碱偊婀侀梺鎸庣箓濞诧箓宕甸埀顒傜磽娴ｇ懓绲绘い顓犲厴瀵鈽夊⿰鍛澑闁诲函缍嗘禍婊勬叏閵忕姭鏀介柣鎰皺婢ф盯鏌涢妸銉т虎闁伙綁顥撶划娆戞嫚閻愵剚鈷愰柟宄版嚇瀹曟粓骞囬崹顐わ紱hen闂傚倸鍊风欢姘焽瑜嶈灋闁哄啫鐗忛崣鏇㈡煟閻愮數鏆塭闂傚倸鍊风粈渚€骞夐敍鍕灊鐎光偓閸曨剙浠肩紓浣割槹娴滎垶姊婚崒娆戝妽闁活亜缍婂畷婵嗙暆閳ь剟鍩€椤掍礁鍤柛鎾村哺瀵煡宕奸弴鐔蜂汗闂佺粯鍔栭崹婵堝垝閹绢喗鈷戦悷娆忓缁茬粯銇勯幋婵囧窛缂侇喖鐗婂鍕箛椤撶姴骞楅梻浣告贡閸庛倕煤濡吋鍏滃Δ锝呭暞閻撴瑦銇勯弮鍌滄憘婵炲牊绮庨埀顒侇問閸犳牠鎮ユ總绋垮瀭濡わ絽鍟惌妤€顭块懜寰楊亝绂掑ú顏呪拺闁煎鍊曞瓭濠电偞娼欓崐鍨暦閵忋倖鍤岄柤鍓插厸濮规姊虹紒妯哄闁圭⒈鍋婂畷锝嗙節閸愶缚绨婚梺鍝勭▉閸嬪嫭绂掗敃鈧湁闁绘顒查懓鍧楁煙椤旀儳鍘寸€殿喗娼欓～婵囶潙閺嶃剱婊勭節閻㈤潧袥闁稿鎸婚妵鍕疀閹炬潙鍋嶆繛瀛樼矊缂嶅﹪寮婚悢鐓庣畾鐟滃秹寮虫潏銊ｄ簻闁靛牆鎳忛崵鍥煙椤旀儳鍘寸€殿喗娼欓～婵嬪础閻愬樊鐎撮梺鑽ゅ枑缁秴顭垮鈧畷顖炲级閹寸姵娈惧┑掳鍊曢幊搴℃暜闁荤喐绮岄柊锝夊箖妤ｅ啯鐒肩€广儱妫涢崢閬嶆偡濠婂啴鍙勯柕鍡楀暞瀵板嫮浠﹂幆褍绨ユ繝纰樻閸ㄤ即宕ョ€ｎ喖纾绘俊顖氱毞閸嬫捇宕楁径濠佸闂備線鈧偛鑻晶顕€鏌嶇紒妯诲磳妤犵偛顑夐弫鍐焵椤掑啰绠介梻鍌欐祰濞夋洟宕抽敃鍌氱闁跨噦鎷�
    //闂傚倸鍊峰ù鍥綖婢跺顩插ù鐘差儏绾惧潡鏌涢幇顒佲枙闁绘帊绮欓弻娑㈠箛閸忓摜鍑归梺鍝ュ枎閹碱偊濡撮幒鎴僵闁挎繂鎳嶆竟鏇㈡⒒娓氣偓閳ь剛鍋涢懟顖涙櫠椤栫偞鐓曢柡鍐ｅ亾闁绘濞€閵嗕礁螖閸涱喖鈧兘鏌涘┑鍡楊伀妞ゆ柨鎳忕换婵嬫偨闂堟刀銏ゆ煕婵犲懎鍚圭紒顔芥⒐缁轰粙宕ㄦ繝鍕箞闂備浇顫夐崕宕囧椤撶偞姣勫┑锛勫亼閸婃劙寮查鍡欎笉闁规崘宕靛畵渚€鏌熼幑鎰靛殭缂佺姵濞婇弻鐔衡偓娑欘焽缁犳挻鎱ㄧ憴鍕弨婵﹤鎼晥闁搞儜鍐剧€抽梺璇插閸戝綊宕滃▎鎾偓锕傚炊椤掍焦娅栭梺鍛婃处閸撴瑩顢撳☉銏♀拺闁告稑锕ョ€垫瑩鏌涘☉鍗炴灓闁逞屽墻閸樼晫鎹㈠☉銏犵闁绘劖娼欓弳妤呮⒑濮瑰洤濡块悘蹇撶n闂傚倸鍊风粈渚€骞楀⿰鍫濈獥闁糕剝绋戠壕鍧楁煕閹邦厾銈撮柡瀣閺岀喐娼忔ィ鍐╊€嶉梺鍝勬媼閸撴盯鍩€椤掆偓閸樻粓宕戦幘缁樼厱闁归偊鍘奸崝銈夋煛閸滀礁骞楃紒缁樼箞濡啫鈽夊Ο宄颁壕闁芥ê锛夊☉銏犵妞ゆ牗姘ㄩ悾鍝勨攽椤旂》鏀绘い鈺冧刊Code


    func = builder->getInsertBB()->getParent();
    loop_cond_bb = new BasicBlock(func);
    loop_body_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    new UncondBrInstruction(loop_cond_bb, builder->getInsertBB());

    int recorded_loop_bb_in_stack = loop_manager.new_loop_enter(loop_cond_bb, end_bb);


    LinkBB(builder->getInsertBB(), loop_cond_bb);
    LinkBB(loop_cond_bb, loop_body_bb);
    LinkBB(loop_cond_bb, end_bb);

    

    //the judgement to break is set inside the loopbb
    //thanks to the fucking coding, i have to write english comment now!
    builder->setInsertBB(loop_cond_bb);
    cond->getSymPtr()->changeType(TypeSystem::boolType);
    cond->genCode();
    backPatch(cond->trueList(), loop_body_bb);
    backPatch(cond->falseList(), end_bb);
    new CondBrInstruction(loop_body_bb, end_bb, cond->getOperand(), loop_cond_bb);


    builder->setInsertBB(loop_body_bb);

    //i don't know whether it's right. but apparently, the domain must be change.

    stmt_genCode(doStmt, loop_body_bb, func);

    loop_body_bb = builder->getInsertBB();
    new UncondBrInstruction(loop_cond_bb, loop_body_bb);



    builder->setInsertBB(end_bb);
    loop_manager.loop_end(recorded_loop_bb_in_stack);

}

void ConstDeclList::typeCheck()
{

    if (decl1 != nullptr)
        decl1->typeCheck();

    if (decl2 != nullptr)
        decl2->typeCheck();
}
void ConstDeclList::genCode()
{
       if (decl1 != nullptr)
        decl1->genCode();

    if (decl2 != nullptr)
        decl2->genCode();
}

void DeclList::typeCheck()
{

    if (decl1 != nullptr)
        decl1->typeCheck();

    if (decl2 != nullptr)
        decl2->typeCheck();
}
void DeclList::genCode()
{
     if (decl1 != nullptr)
        decl1->genCode();

    if (decl2 != nullptr)
        decl2->genCode();
}

void ConstDeclInitStmt::typeCheck()
{

    if (initVal != nullptr)
        initVal->typeCheck();

}
void ConstDeclInitStmt::genCode()
{
      if (initVal != nullptr)
        initVal->genCode();
}

void DeclInitStmt::typeCheck()
{
    if (initVal != nullptr)
        initVal->typeCheck();
}
void DeclInitStmt::genCode()
{
    //std::cout<<"declInit gencode"<<std::endl;
    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
    if(se->isGlobal())
    {
        //std::cout << "fuck" << std::endl;
        Operand *addr;
        SymbolEntry *addr_se;
        addr_se = new IdentifierSymbolEntry(*se);
        addr_se->setType(new PointerType(se->getType()));
        addr = new Operand(addr_se);
        se->setAddr(addr);
        Instruction *g;
        //initVal->genCode();
        g = new GlobalInstruction(new Operand(id->getSymPtr()), initVal->getOperand(), se);
        g->output();
    }
    else if(se->isLocal())
    {
        switch (se->getType()->get_range())
        {
        case 2:
            Function * func = builder->getInsertBB()->getParent();
            BasicBlock* entry = func->getEntry();
            Instruction* alloca;
            Operand* addr;
            SymbolEntry* addr_se;
            Type* type;
            type = new PointerType(se->getType());
            addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
            addr = new Operand(addr_se);
            alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
            entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
            se->setAddr(addr);
            break;
        }
                                               // set the addr operand in symbol entry so that we can use it in subsequent code generation.
    }
    else
    {
        std::cout << "what the hell are you trying to decl?!" << std::endl;
    }
}

void FunctCall::typeCheck()
{
    paramVector.clear();
    if (para_node != nullptr)
        para_node->typeCheck();
  
     int paramR_num=paramVector.size();
     SymbolEntry* s =this->symbolEntry;
    FunctionType* type=(FunctionType*)s->getType();
    int paramF_num=type->paramsType.size();
     if(paramR_num!=paramF_num)
     {
          //printf("Fnum:%d,Rnum:%d\n",paramF_num,paramR_num);
          fprintf(stderr, "function  \'%s\'has wrong  params num!\n",symbolEntry->toStr().c_str());
    }
    std::vector<Type*> paramR = paramVector;
    std::vector<Type*> paramF = type->paramsType;
    bool equal = true;
    if (paramR.size() == paramF.size())
    {
    
    for (size_t i = 0; i < paramR.size(); ++i)
    {
        if (paramR[i] != paramF[i])
        {
            equal = false;
            break;
        }
    }
    }
    if(!equal)
    {
         fprintf(stderr, "function  \'%s\'has wrong params type\n",symbolEntry->toStr().c_str());
    }
    
}
void FunctCall::genCode()
{
     
    //std::cout<<"functcall_gencode"<<std::endl;
    if(para_node!=nullptr)
    {
    para_operands.clear();
    para_node->genCode();
    }
    //std::cout<<"paranode_gencode"<<std::endl;
    BasicBlock *bb = builder->getInsertBB();
    // fprintf("ssssssssss%s")
    new CallInstruction(dst, symbolEntry, para_operands, bb);
}

void ParaNode::typeCheck()
{
    
    if(!is_link)
    {
        Type *type=para_expr->getSymPtr()->getType();
        paramVector.push_back(type);
    }
    if (para1 != nullptr)
        para1->typeCheck();
    if (para2 != nullptr)
        para2->typeCheck();
    if (para_expr != nullptr)
        para_expr->typeCheck();
}
void ParaNode::genCode()
{
    if(!is_link)
    {
        //std::cout<<"fuck expr"<<std::endl;
        para_operands.push_back(para_expr->getOperand());
        para_expr->genCode();
    }
    else 
    {
        if(para1!=nullptr)
        {
        para1->genCode();
        }
        if(para2!=nullptr)
        {
            para2->genCode();
        }
        
    }
    
}

void InitNode::typeCheck()
{
    if (node1 != nullptr)
        node1->typeCheck();
    if (node2 != nullptr)
        node2->typeCheck();
    if (value_here != nullptr)
        value_here->typeCheck();
}
void InitNode::genCode()
{

}

void UnaryExpr::typeCheck()
{
    if (expr != nullptr)
        expr->typeCheck();
}
void UnaryExpr::genCode()
{

}




//闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悹鍥у级椤ユ繈姊洪棃娑氬婵☆偅顨婇、鏃堝醇閺囩啿鎷洪柣鐘充航閸斿矂寮搁幋锔界厸閻庯綆浜堕悡鍏碱殽閻愯尙绠婚柡灞诲妿閳ь剨缍佸褎绔熷鈧铏圭矙閸柭ゅ惈濠碘槅鍋勫锟犵嵁婢舵劕惟闁冲搫鍊婚崣鍡涙⒑缂佹ɑ鐓ラ柟璇х節閹﹢顢氶埀顒勫蓟閻斿壊妲归幖绮光偓鍐茬闂備浇妗ㄩ悞锕傚箲閸パ屽殨妞ゆ帒瀚洿闂佺硶鍓濋〃蹇斿閹剧粯鈷掑ù锝堝Г绾爼鏌涢敐蹇曠暤妤犵偛绻橀弫鎾绘晸閿燂拷?


std::string ExprNode::get_name()
{
    return symbolEntry->toStr();
}









void BinaryExpr::output(int level)
{
    /*float temp_store = cal_expr_val();
    if (temp_store != PRE_CAL_ERROR_MEETING_VAL)
    {
        if (getSymPtr()->getType()->isFLOAT())
            fprintf(yyout, "%*c\tExprValue:\t%f\n", level, ' ', temp_store);
        else if (getSymPtr()->getType()->isInt())
            fprintf(yyout, "%*c\tExprValue:\t%d\n", level, ' ', (int)temp_store);
        return;
    }*/
    //闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋鍌溞ㄩ梺璇″灠鐎氫即鐛鈧、娆撴嚍閵夛富浠ч梻鍌欑閹碱偊宕愰崼鏇炵９闁哄稁鍋€閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悹鍥у级椤ユ繈姊洪棃娑氬婵☆偅顨婇、鏃堝醇閺囩啿鎷洪柣鐘充航閸斿苯鈻嶉幇鐗堢厵闁告垯鍊栫€氾拷


    //typeCheck();
    std::string op_str;
    switch (op)
    {
    case ADD:
        op_str = "add";
        break;
    case SUB:
        op_str = "sub";
        break;
    case MUL:
        op_str = "mul";
        break;
    case DIV:
        op_str = "div";
        break;
    case MOD:
        op_str = "mod";
        break;
    case AND:
        op_str = "and";
        break;
    case OR:
        op_str = "or";
        break;
    case LESS:
        op_str = "less";
        break;
    case INCREMENT_BEFORE:
        op_str = "increment_before";
        break;
    case DECREMENT_AFTER:
        op_str = "decrement_after";
        break;
    case INCREMENT_AFTER:
        op_str = "increment_after";
        break;
    case DECREMENT_BEFORE:
        op_str = "decrement_after";
    case GREATER:
        op_str = "greater";
        break;
    case LESSEQUAL:
        op_str = "less equal";
        break;
    case GREATEREQUAL:
        op_str = "greater equal";
        break;
    case EQUAL:
        op_str = "equal";
        break;
    case NOTEQUAL:
        op_str = "not equal";
        break;
    }
    fprintf(yyout, "%*cBinaryExpr\top: %s\n", level, ' ', op_str.c_str());
    if (is_crement)
    {
        ID->output(level + 4);
    }
    else
    {
        expr1->output(level + 4);
        expr2->output(level + 4);
    }
}
void UnaryExpr::output(int level)
{
    /*float temp_store = cal_expr_val();
    if (temp_store != PRE_CAL_ERROR_MEETING_VAL)
    {
        if (getSymPtr()->getType()->isFLOAT())
            fprintf(yyout, "%*c\tExprValue:\t%f\n", level, ' ', temp_store);
        else if (getSymPtr()->getType()->isInt())
            fprintf(yyout, "%*c\tExprValue:\t%d\n", level, ' ', (int)temp_store);
        return;
    }*/


    std::string op_str;
    switch (op)
    {
    case ADD:
        op_str = "add";
        break;
    case SUB:
        op_str = "sub";
        break;
    case NOT:
        op_str = "NOT";
        break;
    }
    fprintf(yyout, "%*cUnaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr->output(level + 4);
}
void FunctCall::output(int level)
{
    fprintf(yyout, "%*ccall_funct %s\n", level, ' ', get_symbolEntry()->toStr().c_str());
    if (para_node != nullptr)
    {
        para_node->output(level + 4);
    }
}
void InitNode::output(int level, int dim, int* dim_record)
{
    if (is_checkpoint)
    {
        for (int i = dim + 1; i < 10; i++)
        {
            dim_record[i] = -1;
        }
        dim_record[dim]++;
        if (is_exp)
        {
            value_here->output(level);
            fprintf(yyout, "\t\t\t\tposition in the arr: ");
            for (int i = 0; i < 10 && dim_record[i] != -1; i++)
            {
                fprintf(yyout, " %d ", dim_record[i]);
            }
        }
        else
        {
            node1->output(level, dim + 1, dim_record);
            node2->output(level, dim + 1, dim_record);
        }
    }
    else
    {
        if (is_exp)
        {
            value_here->output(level);
            dim_record[dim]++;
            fprintf(yyout, "\t\t\t\tposition in the arr: ");
            for (int i = 0; i < 10 && dim_record[i] != -1; i++)
            {
                fprintf(yyout, " %d ", dim_record[i]);
            }
            fprintf(yyout, "\n");
        }
        else
        {
            node1->output(level, dim, dim_record);
            node2->output(level, dim, dim_record);
        }
    }
}

void ArrDimNode::output(int level)
{
    if (is_link)
    {
        arr1->output(level);
        arr2->output(level);
    }
    else
    {
        //typeCheck();
        if(node_state == ACCESS)
            fprintf(yyout, "%*c\t\taccessing_pos:\n", level, ' ');
        else
            fprintf(yyout, "%*c\t\tdimension_size:\n", level, ' ');
        if (is_not_val)
            fprintf(yyout, "%*c\t\t%d\n", level, ' ', (int)dimension_size->cal_expr_val());
            //std::cout << dimension_size->cal_expr_val() << std::endl;
        else
        {
            if (node_state == ACCESS)
                dimension_size->output(level + 20);
            else
                //闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋悙顒€顏�
                fprintf(stderr, "not a const \n");
        }
        //dimension_size->output(level + 20);
    }
}



void ParaNode::output(int level)
{
    if (is_link)
    {
        para1->output(level);
        para2->output(level);
    }
    else
    {
        fprintf(yyout, "%*c\t\tpara expr:\n", level, ' ');
        para_expr->output(level + 20);
    }
}
void DeclInitStmt::output(int level)
{
    fprintf(yyout, "%*cDeclInitStmt\n", level, ' ');
    id->output(level + 4);
    initVal->output(level + 4);
}
void ConstDeclInitStmt::output(int level)
{
    fprintf(yyout, "%*cConstDeclInitStmt\n", level, ' ');
    id->output(level + 4);
    initVal->output(level + 4);
}
void DeclList::output(int level)
{
    fprintf(yyout, "%*cDeclList\n", level, ' ');
    decl1->output(level + 4);
    decl2->output(level + 4);
}
void ConstDeclList::output(int level)
{
    fprintf(yyout, "%*cConstDeclList\n", level, ' ');
    decl1->output(level + 4);
    decl2->output(level + 4);
}
void WhileStmt::output(int level)
{
    //闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋浣界闂侀€炲苯澧繝鈧柆宥呯；闁靛牆顦弸渚€鏌熼幑鎰厫闁稿蓱娣囧﹪濡堕崪浣稿壋缂備礁顦悥濂稿蓟閻旈鏆嬮柡澶嬪浜涢柣鐔哥矋婵℃悂宕堕妸褍寮抽梻浣虹帛濮婄懓顪冮崹顕呯劷闁挎稑瀚Λ顖炴煛婢跺鍎ユ俊鎻掔秺閹顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悗闈涙憸閹虫繈姊洪棃娑辨Ф闁稿骸宕埢鎾诲煛閸涱喚鍘垫俊鐐差儏妤犳悂宕㈤幘顔界厸濞达綀顫夊畷宀€鈧鍣崜鐔镐繆閸洖骞㈡俊銈咃梗缁憋箓姊婚崒娆愮グ婵炲娲熷畷浼村箛閺夊灝鍤戞繝鐢靛У閼瑰墽绮婚鐐寸厽闁硅揪绲借闂佸搫鎳忛幃鍌炲蓟閿熺姴纾兼俊顖濄€€閸嬫捇寮介鐔蜂壕婵﹩鍓涚粔娲煟濞戝崬娅嶇€殿喗鎸虫慨鈧柍鈺佸暞椤忕喖姊绘担鍛婃儓闁稿﹤鐖煎畷鎰板冀椤愮喎浜炬慨姗嗗墰缁夋椽鏌＄仦璇插闁诡喓鍨藉畷銊︾節閸曨亞纾块梻鍌欑缂嶅﹪藟閹捐绀傛慨妞诲亾鐎殿噮鍋婇獮妯兼崉閾忓湱鐡橀梻浣虹帛閻楁梻娆㈠璺鸿摕闁靛ň鏅滈崑鍕煕濞戞﹫鍔熷ù鐓庡濮婃椽宕烽鐔哄姽濠电偞鎸稿﹢杈╁垝閳哄懎绠绘い鏃傛櫕閸欏棝姊虹紒妯荤叆闁硅绻濋幃姗€顢氶埀顒勫蓟閻斿壊妲归幖绮光偓鍐茬闂備浇妗ㄩ悞锕傚箲閸パ屽殨妞ゆ帒瀚洿闂佺硶鍓濋〃蹇斿閹剧粯鈷掑ù锝堝Г绾爼鏌涢悩鍐插鐎殿喖鎲＄换婵嗩潩椤掑偆鍞甸梻浣芥硶閸ｏ箓骞忛敓锟�
    fprintf(yyout, "%*cWhileStmt\n", level, ' ');
    cond->output(level + 4);
    if (doStmt != nullptr)
    {
        doStmt->output(level + 4);
    }
}
void BreakStmt::output(int level)
{
    if(whether_valid)
        fprintf(yyout, "%*cBreak\n", level, ' ');
    else
    {
        fprintf(stderr, "break not in loop \n");
        fprintf(yyout, "%*cerror,break not in loop\n", level, ' ');
    }
}
void ContinueStmt::output(int level)
{
    if (whether_valid)
        fprintf(yyout, "%*cContinue\n", level, ' ');
    else
    {
        fprintf(stderr, "continue not in loop \n");
        fprintf(yyout, "%*cerror,continue not in loop\n", level, ' ');
    }
}
void EmptyStmt::output(int level) 
{

}
void DoNothingStmt::output(int level)
{
    fprintf(yyout, "%*cWhileStmt\n", level, ' ');
    do_nothing_node->output(level + 4);
}



void Ast::output()
{
    fprintf(yyout, "program\n");
    if(root != nullptr)
        root->output(4);
}

void Constant::output(int level)
{
    //std::string type, value;
    //type = symbolEntry->getType()->toStr();
    //value = symbolEntry->toStr();
    //fprintf(yyout, "%*cIntegerLiteral\tvalue: %s\ttype: %s\n", level, ' ',
    //        value.c_str(), type.c_str());
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    if (this->symbolEntry->getType()->isInt())
    {
        fprintf(yyout, "%*cIntegerLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
    }
    else if (this->symbolEntry->getType()->isFLOAT())
    {
        //闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鍓х帛閸嬪倹銇勯幇鈺佲偓鎾绘倿婵犲洤绾ч柛顐ｇ濞呭懘鏌ｉ妸锕€鐏撮柡宀€鍠愰ˇ鐗堟償閳ュ啿绠ｉ梻浣芥〃閻掞箓骞戦崶褜鍤曟い鎺戝鍥撮梺绯曞墲椤ㄥ繑瀵奸幖鎶穖bolentry闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈嗘優闁荤喐婢橀幆鐐烘⒒娴ｇ瓔娼愰柛搴㈠▕楠炲﹨绠涢弴妤€浜炬慨姗嗗墰缁夋椽鏌＄仦璇插闁诡喓鍨介幖褰掓偡閺夋寧鍎梻鍌氬€搁崐鎼佹偋閸愵喖鐤炬繝濠傛噳閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悹鍥у级椤ユ繈姊洪棃娑氬婵☆偅顨婇、鏃堝醇閺囩啿鎷洪柣鐘充航閸斿矂寮搁幋锔界厸閻庯綆浜堕悡鍏碱殽閻愯尙绠婚柟顔界矒閹崇偤濡烽敂绛嬩户闂傚倷绀侀幖顐﹀磹閸洖纾归柡宥庡亐閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悹鍥у级椤ユ繈姊洪棃娑氬婵☆偅顨婇、鏃堝醇閺囩偟楠囬梺缁樺灥濡鏅堕幘顔界厸濞达綀顫夊畷宀€鈧鍣崜鐔镐繆閸洖骞㈡俊銈咃梗缁憋箑鈹戦悙鏉戠仸闁规瓕顕ч—鍐╃鐎ｎ亝鐎梺瑙勫礃閸╂牠宕戝Ο璁崇箚闁靛牆鍊告禍楣冩⒑閹肩偛鈧牠鎮ч悩鑽ゅ祦闊洦绋掗崐濠氭煠閹帒鍔滄繛鍛灲濮婃椽宕崟顐熷亾閸洖纾归柡宥庡亐閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀鐘垫殝闂侇叏闄勯敍渚€姊绘担鐟邦嚋缂佽鍊婚幑銏ゅ箣閻橆偄浜炬慨姗嗗墰缁夋椽鏌＄仦璇插闁诡喓鍨藉畷銊︾節閸曨亞纾块梻鍌欑缂嶅﹪藟閹捐绀傛慨妞诲亾鐎殿噮鍋婇獮妯兼嫚閸欏妫熼梻渚€娼ч悧鍡椢涘Δ鍜佹晜闁割偅娲橀埛鎴︽偣閹帒濡奸柡瀣懄閵囧嫰濮€閿涘嫮鐓夊Δ鐘靛仜椤﹂亶鍩€椤掑﹦绉甸柛瀣椤㈡棃宕奸弴鐔叉嫼闁荤姵浜介崝灞解枍閹扮増鐓欓柛鎴欏€栫€氾拷?s闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柡宥庡幖閻绻涘顔荤凹闁稿鐗犻幃妤€鈽夊▍顓т邯椤㈡棃宕奸弴鐔叉嫼闁荤姵浜介崝宀勫几鎼粹槅鐔嗛悷娆忓閹冲懘鏌熸搴⌒い锔藉▕閹顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠荤紓浣姑▓鐔兼⒑缁嬫寧婀扮紒顔肩Ч椤㈡棃鎮㈤崗鑲╁幍閻庣懓瀚妯何ｉ懡銈傚亾鐟欏嫭绀堝褎顨婇獮蹇涘川椤撗冩倯婵犮垼娉涢鍡椻枍閵忋倖鈷戦柛婵嗗閳ь剙鐖煎畷鎰板冀椤愮喎浜炬慨姗嗗墰缁夋椽鏌＄仦璇插闁诡喓鍨藉畷銊︾節閸曨亞纾块梻鍌欒兌閹虫捇宕甸弽顓炵闁跨噦鎷�
        fprintf(yyout, "%*cFLOATLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
    }
}

void Id::output(int level)
{
    /*std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());*/
    
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    if (ERROR_MESSAGE_WRITE_INTO_AST)
    {
        if (define_state == NOT_DEFINED)
        {
            fprintf(yyout, "%*c\twarning,identifier %s is not defined\n", level, ' ',
                name.c_str());
        }
        else if (define_state == REDEFINATION)
        {
            fprintf(yyout, "%*c\twarning,identifier %s is redefined\n", level, ' ',
                name.c_str());
        }
    }
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
        name.c_str(), scope, type.c_str());
    if (id_type == INT_ARRAY)
    {
        Dimension->output(level + 4);
        if (Init != nullptr)
        {
            Init->output(level + 4, 0, dim_record);
        }
    }
}

void CompoundStmt::output(int level)
{
    fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
    stmt->output(level + 4);
}

void SeqNode::output(int level)
{
    stmt1->output(level);
    stmt2->output(level);
}

void DeclStmt::output(int level)
{
    fprintf(yyout, "%*cDeclStmt\n", level, ' ');
    id->output(level + 4);
}


void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
 /* thenStmt->output(level + 4);
    elseStmt->output(level + 4);*/

    if (thenStmt != nullptr)
    {
        thenStmt->output(level + 4);
    }
    if (elseStmt != nullptr)
    {
        elseStmt->output(level + 4);
    }
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    if(retValue!=nullptr)
        retValue->output(level + 4);
}

void AssignStmt::output(int level)
{
    typeCheck();
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);

    //std::cout << expr->cal_expr_val() << std::endl;
    expr->output(level + 4);
}

void FunctionDef::output(int level)
{
    //std::string name, type;
    //name = se->toStr();
    //type = se->getType()->toStr();
    //fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ', 
    //        name.c_str(), type.c_str());
    //stmt->output(level + 4);

    std::string name, type;
    if (se == nullptr)
    {
        fprintf(stderr, "Oops!闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨堕弻锝夊箣閿濆憛鎾绘煛閸涱喗鍊愰柡宀嬬節瀹曟帒螣鐞涒€充壕闁哄稁鍋€閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠婚悹楦挎缁涘繘姊洪崷顓溾偓瀣箯閿燂拷");//闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柟鐗堟緲閸戠姴鈹戦悩瀹犲缂佺媭鍨抽埀顒傛嚀鐎氼厼顭垮Ο鑲╃焾妞ゅ繐鐗婇埛鎴︽偣閹帒濡奸柡瀣灴閺岋紕鈧綆浜堕悡鍏碱殽閻愯尙绠婚柟顔界矒閹崇偤濡烽敂绛嬩户闂傚倷绀侀幖顐﹀磹閸洖纾归柡宥庡亐閸嬫挸顫濋鍌溞ㄩ梺鍝勮閸旀垿骞冮姀銈呭窛濠电姴瀚槐鏇㈡⒒娴ｅ摜绉烘い銉︽崌瀹曟顫滈埀顒€顕ｉ锕€绠荤紓浣姑崜鐟邦渻閵堝棗濮х紒杈ㄦ礃缁嬪寮婚妷锔惧幍閻庣懓瀚妯何ｉ懡銈傚亾鐟欏嫭灏紒缁橈耿瀵濡搁埡鍌氫簻闂佸憡绋戦敃锔藉閸曨垱鈷戠憸鐗堝俯濡垿鏌涜箛鏃撹€跨€殿噮鍋婇獮妯肩磼濡粯顏熼梻浣芥硶閸ｏ箓骞忛敓锟�?
        assert(se != nullptr);      //闂傚倸鍊峰ù鍥р枖閺囥垹绐楅柡宥庣仜閻斿憡濯撮柧蹇撶秺閳瑰繘鏌ｉ悢鍝ユ噧閻庢凹鍓熼、鏃傛崉鐞涒剝顫嶉梺鍦檸閸ㄧ増绂嶆ィ鍐┾拻濞达綀濮ょ涵鍫曟煕閻樺啿濮嶇€殿喖鎲＄换婵嗩潩椤掑偆鍞甸梻浣虹帛閸ㄥ吋鎱ㄩ妶澶婄柧闁归棿鐒﹂悡娑㈡煕鐏炰箙顏堝焵椤掍胶澧遍柍褜鍓氶懝鍓х礊婵犲洤钃熼柕濞炬櫆閸嬪嫰鏌ｉ幋鐑嗙劷闁哄棴绠撻弻鈩冨緞婵犲嫬鈪遍梺绋款儐閹搁箖鍩€椤掍浇澹樼紓宥咃躬瀵濡搁埡鍌氫簻闂佸憡绋戦敃锔藉閸曨垱鈷戦柣鐔告緲濞堚晠鏌熼崙銈嗗
    }
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ',
        name.c_str(), type.c_str());
    if (paraStmt != nullptr)
        paraStmt->output(level + 4);
    if (stmt != nullptr)
        stmt->output(level + 4);
}














//merge const exp here
void Ast::mergeConstExp()
{
    root->mergeConstExp();
}




